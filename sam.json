{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Exported by architect/package@8.5.2 on 2023-08-25T01:13:26.287Z",
  "Resources": {
    "Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ArcGlobalPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": "ArcStaticBucketPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:DeleteObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:aws:s3:::${bukkit}",
                        {
                          "bukkit": {
                            "Ref": "StaticBucket"
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:aws:s3:::${bukkit}/*",
                        {
                          "bukkit": {
                            "Ref": "StaticBucket"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "ArcDynamoPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "dynamodb:*",
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}",
                        {
                          "tablename": {
                            "Ref": "DataTable"
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*",
                        {
                          "tablename": {
                            "Ref": "DataTable"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Deny",
                  "Action": "dynamodb:DeleteTable",
                  "Resource": {
                    "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "ArcSimpleNotificationServicePolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}*",
                      {}
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "DataParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Name": {
          "Fn::Sub": [
            "/${AWS::StackName}/tables/${tablename}",
            {
              "tablename": "data"
            }
          ]
        },
        "Value": {
          "Ref": "DataTable"
        }
      }
    },
    "MessagePostedEventTopicParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Name": {
          "Fn::Sub": [
            "/${AWS::StackName}/events/${event}",
            {
              "event": "message-posted"
            }
          ]
        },
        "Value": {
          "Ref": "MessagePostedEventTopic"
        }
      }
    },
    "StaticBucketParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Name": {
          "Fn::Sub": [
            "/${AWS::StackName}/static/${key}",
            {
              "key": "bucket"
            }
          ]
        },
        "Value": {
          "Ref": "StaticBucket"
        }
      }
    },
    "StaticFingerprintParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Name": {
          "Fn::Sub": [
            "/${AWS::StackName}/static/${key}",
            {
              "key": "fingerprint"
            }
          ]
        },
        "Value": "true"
      }
    },
    "ParameterStorePolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "Role",
      "Properties": {
        "PolicyName": "ArcParameterStorePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ssm:GetParametersByPath",
                "ssm:GetParameter"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}",
                  {}
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:GetParametersByPath",
                "ssm:GetParameter"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*",
                  {}
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:GetParametersByPath",
                "ssm:GetParameter"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*/*",
                  {}
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    },
    "HTTP": {
      "Type": "AWS::Serverless::HttpApi",
      "Properties": {
        "StageName": "$default",
        "DefinitionBody": {
          "openapi": "3.0.1",
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            }
          },
          "paths": {
            "/channels/{key}": {
              "get": {
                "x-amazon-apigateway-integration": {
                  "payloadFormatVersion": "2.0",
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetChannelsKeyHTTPLambda.Arn}/invocations"
                  },
                  "connectionType": "INTERNET"
                }
              },
              "post": {
                "x-amazon-apigateway-integration": {
                  "payloadFormatVersion": "2.0",
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostChannelsKeyHTTPLambda.Arn}/invocations"
                  },
                  "connectionType": "INTERNET"
                }
              }
            },
            "/login": {
              "get": {
                "x-amazon-apigateway-integration": {
                  "payloadFormatVersion": "2.0",
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLoginHTTPLambda.Arn}/invocations"
                  },
                  "connectionType": "INTERNET"
                }
              }
            },
            "/": {
              "get": {
                "x-amazon-apigateway-integration": {
                  "payloadFormatVersion": "2.0",
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndexHTTPLambda.Arn}/invocations"
                  },
                  "connectionType": "INTERNET"
                }
              }
            },
            "/logout": {
              "post": {
                "x-amazon-apigateway-integration": {
                  "payloadFormatVersion": "2.0",
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostLogoutHTTPLambda.Arn}/invocations"
                  },
                  "connectionType": "INTERNET"
                }
              }
            },
            "/_static/{proxy+}": {
              "get": {
                "x-amazon-apigateway-integration": {
                  "payloadFormatVersion": "1.0",
                  "type": "http_proxy",
                  "httpMethod": "GET",
                  "uri": {
                    "Fn::Sub": [
                      "https://${bukkit}.s3.${AWS::Region}.amazonaws.com/{proxy}",
                      {
                        "bukkit": {
                          "Ref": "StaticBucket"
                        }
                      }
                    ]
                  },
                  "connectionType": "INTERNET",
                  "timeoutInMillis": 30000
                }
              }
            }
          }
        }
      }
    },
    "GetChannelsKeyHTTPLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/arc-example-wss/src/http/get-channels-000key",
        "Runtime": "nodejs16.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "arc-example-wss",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "ARC_WSS_URL": {
              "Fn::Sub": [
                "wss://${WS}.execute-api.${AWS::Region}.amazonaws.com/staging",
                {}
              ]
            },
            "GITHUB_CLIENT_ID": "67178a38d302728edf5e",
            "GITHUB_CLIENT_SECRET": "3188deaf1683724f084b39c2680a89479e37fdd4",
            "GITHUB_REDIRECT": "https://meatspace.chat/login"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetChannelsKeyHTTPEvent": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/channels/{key}",
              "Method": "GET",
              "ApiId": {
                "Ref": "HTTP"
              }
            }
          }
        }
      },
      "ArcMetadata": {
        "pragma": "http",
        "name": "get /channels/:key",
        "method": "get",
        "path": "/channels/:key"
      }
    },
    "GetLoginHTTPLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/arc-example-wss/src/http/get-login",
        "Runtime": "nodejs16.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "arc-example-wss",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "ARC_WSS_URL": {
              "Fn::Sub": [
                "wss://${WS}.execute-api.${AWS::Region}.amazonaws.com/staging",
                {}
              ]
            },
            "GITHUB_CLIENT_ID": "67178a38d302728edf5e",
            "GITHUB_CLIENT_SECRET": "3188deaf1683724f084b39c2680a89479e37fdd4",
            "GITHUB_REDIRECT": "https://meatspace.chat/login"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetLoginHTTPEvent": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/login",
              "Method": "GET",
              "ApiId": {
                "Ref": "HTTP"
              }
            }
          }
        }
      },
      "ArcMetadata": {
        "pragma": "http",
        "name": "get /login",
        "method": "get",
        "path": "/login"
      }
    },
    "GetIndexHTTPLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/arc-example-wss/src/http/get-index",
        "Runtime": "nodejs16.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "arc-example-wss",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "ARC_WSS_URL": {
              "Fn::Sub": [
                "wss://${WS}.execute-api.${AWS::Region}.amazonaws.com/staging",
                {}
              ]
            },
            "ARC_STATIC_SPA": false,
            "GITHUB_CLIENT_ID": "67178a38d302728edf5e",
            "GITHUB_CLIENT_SECRET": "3188deaf1683724f084b39c2680a89479e37fdd4",
            "GITHUB_REDIRECT": "https://meatspace.chat/login"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetIndexHTTPEvent": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/",
              "Method": "GET",
              "ApiId": {
                "Ref": "HTTP"
              }
            }
          }
        }
      },
      "ArcMetadata": {
        "pragma": "http",
        "name": "get /",
        "method": "get",
        "path": "/"
      }
    },
    "PostChannelsKeyHTTPLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/arc-example-wss/src/http/post-channels-000key",
        "Runtime": "nodejs16.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "arc-example-wss",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "ARC_WSS_URL": {
              "Fn::Sub": [
                "wss://${WS}.execute-api.${AWS::Region}.amazonaws.com/staging",
                {}
              ]
            },
            "GITHUB_CLIENT_ID": "67178a38d302728edf5e",
            "GITHUB_CLIENT_SECRET": "3188deaf1683724f084b39c2680a89479e37fdd4",
            "GITHUB_REDIRECT": "https://meatspace.chat/login"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "PostChannelsKeyHTTPEvent": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/channels/{key}",
              "Method": "POST",
              "ApiId": {
                "Ref": "HTTP"
              }
            }
          }
        }
      },
      "ArcMetadata": {
        "pragma": "http",
        "name": "post /channels/:key",
        "method": "post",
        "path": "/channels/:key"
      }
    },
    "PostLogoutHTTPLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/arc-example-wss/src/http/post-logout",
        "Runtime": "nodejs16.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "arc-example-wss",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "ARC_WSS_URL": {
              "Fn::Sub": [
                "wss://${WS}.execute-api.${AWS::Region}.amazonaws.com/staging",
                {}
              ]
            },
            "GITHUB_CLIENT_ID": "67178a38d302728edf5e",
            "GITHUB_CLIENT_SECRET": "3188deaf1683724f084b39c2680a89479e37fdd4",
            "GITHUB_REDIRECT": "https://meatspace.chat/login"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "PostLogoutHTTPEvent": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/logout",
              "Method": "POST",
              "ApiId": {
                "Ref": "HTTP"
              }
            }
          }
        }
      },
      "ArcMetadata": {
        "pragma": "http",
        "name": "post /logout",
        "method": "post",
        "path": "/logout"
      }
    },
    "DataTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "scopeID",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "dataID",
            "KeyType": "RANGE"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "scopeID",
            "AttributeType": "S"
          },
          {
            "AttributeName": "dataID",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    },
    "MessagePostedEventLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/arc-example-wss/src/events/message-posted",
        "Runtime": "nodejs16.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "arc-example-wss",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "ARC_WSS_URL": {
              "Fn::Sub": [
                "wss://${WS}.execute-api.${AWS::Region}.amazonaws.com/staging",
                {}
              ]
            },
            "GITHUB_CLIENT_ID": "67178a38d302728edf5e",
            "GITHUB_CLIENT_SECRET": "3188deaf1683724f084b39c2680a89479e37fdd4",
            "GITHUB_REDIRECT": "https://meatspace.chat/login"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "MessagePostedEvent": {
            "Type": "SNS",
            "Properties": {
              "Topic": {
                "Ref": "MessagePostedEventTopic"
              }
            }
          }
        }
      },
      "ArcMetadata": {
        "pragma": "events",
        "name": "message-posted"
      }
    },
    "MessagePostedEventTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "MessagePosted",
        "Subscription": []
      }
    },
    "StaticBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "BucketOwnerEnforced"
            }
          ]
        },
        "WebsiteConfiguration": {
          "IndexDocument": "index.html",
          "ErrorDocument": "404.html"
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": false,
          "BlockPublicPolicy": false,
          "IgnorePublicAcls": false,
          "RestrictPublicBuckets": false
        }
      }
    },
    "StaticBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "StaticBucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:GetObject"
              ],
              "Effect": "Allow",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Sub": [
                    "arn:aws:s3:::${bukkit}/*",
                    {
                      "bukkit": {
                        "Ref": "StaticBucket"
                      }
                    }
                  ]
                }
              ],
              "Sid": "PublicReadGetObject"
            }
          ]
        }
      }
    },
    "WS": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "ArcExampleWssWebsocketStaging",
        "ProtocolType": "WEBSOCKET",
        "RouteSelectionExpression": "$request.body.message"
      }
    },
    "WebsocketDeployment": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "DependsOn": [
        "ConnectWSRoute",
        "DefaultWSRoute",
        "DisconnectWSRoute"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "WS"
        }
      }
    },
    "WebsocketStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "StageName": "staging",
        "DeploymentId": {
          "Ref": "WebsocketDeployment"
        },
        "ApiId": {
          "Ref": "WS"
        }
      }
    },
    "WebSocketPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "Role",
      "Properties": {
        "PolicyName": "ArcWebSocketPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:Invoke",
                "execute-api:ManageConnections"
              ],
              "Resource": [
                {
                  "Fn::Sub": [
                    "arn:aws:execute-api:${AWS::Region}:*:${api}/*",
                    {
                      "api": {
                        "Ref": "WS"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    },
    "ConnectWSLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/arc-example-wss/src/ws/connect",
        "Runtime": "nodejs16.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "arc-example-wss",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "ARC_WSS_URL": {
              "Fn::Sub": [
                "wss://${WS}.execute-api.${AWS::Region}.amazonaws.com/staging",
                {}
              ]
            },
            "GITHUB_CLIENT_ID": "67178a38d302728edf5e",
            "GITHUB_CLIENT_SECRET": "3188deaf1683724f084b39c2680a89479e37fdd4",
            "GITHUB_REDIRECT": "https://meatspace.chat/login"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {}
      },
      "ArcMetadata": {
        "pragma": "ws",
        "name": "connect"
      }
    },
    "ConnectWSRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WS"
        },
        "RouteKey": "$connect",
        "OperationName": "ConnectWSRoute",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "ConnectWSIntegration"
              }
            ]
          ]
        }
      }
    },
    "ConnectWSIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WS"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Sub": [
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectWSLambda.Arn}/invocations",
            {}
          ]
        }
      }
    },
    "ConnectWSPermission": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WS",
        "ConnectWSLambda"
      ],
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "ConnectWSLambda"
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "DefaultWSLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/arc-example-wss/src/ws/default",
        "Runtime": "nodejs16.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "arc-example-wss",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "ARC_WSS_URL": {
              "Fn::Sub": [
                "wss://${WS}.execute-api.${AWS::Region}.amazonaws.com/staging",
                {}
              ]
            },
            "GITHUB_CLIENT_ID": "67178a38d302728edf5e",
            "GITHUB_CLIENT_SECRET": "3188deaf1683724f084b39c2680a89479e37fdd4",
            "GITHUB_REDIRECT": "https://meatspace.chat/login"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {}
      },
      "ArcMetadata": {
        "pragma": "ws",
        "name": "default"
      }
    },
    "DefaultWSRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WS"
        },
        "RouteKey": "$default",
        "OperationName": "DefaultWSRoute",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "DefaultWSIntegration"
              }
            ]
          ]
        }
      }
    },
    "DefaultWSIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WS"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Sub": [
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultWSLambda.Arn}/invocations",
            {}
          ]
        }
      }
    },
    "DefaultWSPermission": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WS",
        "DefaultWSLambda"
      ],
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "DefaultWSLambda"
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "DisconnectWSLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/arc-example-wss/src/ws/disconnect",
        "Runtime": "nodejs16.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "arc-example-wss",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "ARC_STATIC_BUCKET": {
              "Ref": "StaticBucket"
            },
            "ARC_WSS_URL": {
              "Fn::Sub": [
                "wss://${WS}.execute-api.${AWS::Region}.amazonaws.com/staging",
                {}
              ]
            },
            "GITHUB_CLIENT_ID": "67178a38d302728edf5e",
            "GITHUB_CLIENT_SECRET": "3188deaf1683724f084b39c2680a89479e37fdd4",
            "GITHUB_REDIRECT": "https://meatspace.chat/login"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {}
      },
      "ArcMetadata": {
        "pragma": "ws",
        "name": "disconnect"
      }
    },
    "DisconnectWSRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WS"
        },
        "RouteKey": "$disconnect",
        "OperationName": "DisconnectWSRoute",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "DisconnectWSIntegration"
              }
            ]
          ]
        }
      }
    },
    "DisconnectWSIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WS"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Sub": [
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectWSLambda.Arn}/invocations",
            {}
          ]
        }
      }
    },
    "DisconnectWSPermission": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WS",
        "DisconnectWSLambda"
      ],
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "DisconnectWSLambda"
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "Certificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "ValidationMethod": "DNS",
        "DomainName": "meatspace.chat",
        "SubjectAlternativeNames": [
          "*.meatspace.chat"
        ],
        "DomainValidationOptions": [
          {
            "DomainName": "meatspace.chat",
            "HostedZoneId": "Z02440513BVKWOLBE80NL"
          }
        ]
      }
    },
    "Domain": {
      "Type": "AWS::ApiGatewayV2::DomainName",
      "Properties": {
        "DomainName": "meatspace.chat",
        "DomainNameConfigurations": [
          {
            "CertificateArn": {
              "Ref": "Certificate"
            }
          }
        ]
      }
    },
    "Mapping": {
      "Type": "AWS::ApiGatewayV2::ApiMapping",
      "DependsOn": "HTTP",
      "Properties": {
        "Stage": "$default",
        "DomainName": "meatspace.chat",
        "ApiId": {
          "Ref": "HTTP"
        }
      }
    },
    "OriginRequestPolicy": {
      "Type": "AWS::CloudFront::OriginRequestPolicy",
      "Properties": {
        "OriginRequestPolicyConfig": {
          "Name": "meatspace-chat-origin-request-policy",
          "CookiesConfig": {
            "CookieBehavior": "all"
          },
          "HeadersConfig": {
            "HeaderBehavior": "allViewer"
          },
          "QueryStringsConfig": {
            "QueryStringBehavior": "all"
          }
        }
      }
    },
    "WssOriginRequestPolicy": {
      "Type": "AWS::CloudFront::OriginRequestPolicy",
      "Properties": {
        "OriginRequestPolicyConfig": {
          "Name": "meatspace-chat-wss-origin-request-policy",
          "CookiesConfig": {
            "CookieBehavior": "whitelist",
            "Cookies": [
              "_idx"
            ]
          },
          "HeadersConfig": {
            "HeaderBehavior": "whitelist",
            "Headers": [
              "Sec-WebSocket-Key",
              "Sec-WebSocket-Version",
              "Sec-WebSocket-Protocol",
              "Sec-WebSocket-Accept",
              "Sec-WebSocket-Extensions"
            ]
          },
          "QueryStringsConfig": {
            "QueryStringBehavior": "all"
          }
        }
      }
    },
    "CachePolicy": {
      "Type": "AWS::CloudFront::CachePolicy",
      "Properties": {
        "CachePolicyConfig": {
          "Name": "meatspace-chat-cache-policy",
          "DefaultTTL": 86400,
          "MaxTTL": 31536000,
          "MinTTL": 0,
          "ParametersInCacheKeyAndForwardedToOrigin": {
            "EnableAcceptEncodingGzip": true,
            "EnableAcceptEncodingBrotli": true,
            "HeadersConfig": {
              "HeaderBehavior": "whitelist",
              "Headers": [
                "Authorization",
                "Sec-WebSocket-Key",
                "Sec-WebSocket-Version",
                "Sec-WebSocket-Protocol",
                "Sec-WebSocket-Accept",
                "Sec-WebSocket-Extensions"
              ]
            },
            "CookiesConfig": {
              "CookieBehavior": "none"
            },
            "QueryStringsConfig": {
              "QueryStringBehavior": "none"
            }
          }
        }
      }
    },
    "RequestFunction": {
      "Type": "AWS::CloudFront::Function",
      "Properties": {
        "Name": "meatspace-chat-request-function",
        "AutoPublish": true,
        "FunctionCode": "\n          function handler (event) {\n            var request = event.request;\n            request.uri = '/staging';\n            return request;\n          }\n        ",
        "FunctionConfig": {
          "Comment": "function to remove trailing _wss from the request uri",
          "Runtime": "cloudfront-js-1.0"
        }
      }
    },
    "CDN": {
      "Type": "AWS::CloudFront::Distribution",
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            "meatspace.chat"
          ],
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Enabled": true,
          "Origins": [
            {
              "Id": "HttpEdgeOrigin",
              "DomainName": {
                "Fn::Sub": [
                  "${ApiId}.execute-api.${AWS::Region}.amazonaws.com",
                  {
                    "ApiId": {
                      "Ref": "HTTP"
                    }
                  }
                ]
              },
              "CustomOriginConfig": {
                "HTTPPort": 80,
                "HTTPSPort": 443,
                "OriginKeepaliveTimeout": 5,
                "OriginProtocolPolicy": "https-only",
                "OriginReadTimeout": 30,
                "OriginSSLProtocols": [
                  "TLSv1",
                  "TLSv1.1",
                  "TLSv1.2"
                ]
              }
            },
            {
              "Id": "WssEdgeOrigin",
              "DomainName": {
                "Fn::Sub": [
                  "${WS}.execute-api.${AWS::Region}.amazonaws.com",
                  {}
                ]
              },
              "CustomOriginConfig": {
                "HTTPPort": 80,
                "HTTPSPort": 443,
                "OriginKeepaliveTimeout": 5,
                "OriginProtocolPolicy": "https-only",
                "OriginReadTimeout": 30,
                "OriginSSLProtocols": [
                  "TLSv1",
                  "TLSv1.1",
                  "TLSv1.2"
                ]
              }
            }
          ],
          "DefaultCacheBehavior": {
            "TargetOriginId": "HttpEdgeOrigin",
            "OriginRequestPolicyId": {
              "Ref": "OriginRequestPolicy"
            },
            "CachePolicyId": {
              "Ref": "CachePolicy"
            },
            "ViewerProtocolPolicy": "redirect-to-https",
            "MinTTL": 0,
            "AllowedMethods": [
              "HEAD",
              "DELETE",
              "POST",
              "GET",
              "OPTIONS",
              "PUT",
              "PATCH"
            ],
            "CachedMethods": [
              "GET",
              "HEAD"
            ],
            "SmoothStreaming": false,
            "DefaultTTL": 86400,
            "MaxTTL": 31536000,
            "Compress": true
          },
          "CacheBehaviors": [
            {
              "TargetOriginId": "WssEdgeOrigin",
              "PathPattern": "/_wss/*",
              "OriginRequestPolicyId": {
                "Ref": "WssOriginRequestPolicy"
              },
              "CachePolicyId": {
                "Ref": "CachePolicy"
              },
              "FunctionAssociations": [
                {
                  "EventType": "viewer-request",
                  "FunctionARN": {
                    "Fn::GetAtt": [
                      "RequestFunction",
                      "FunctionMetadata.FunctionARN"
                    ]
                  }
                }
              ],
              "ViewerProtocolPolicy": "allow-all",
              "MinTTL": 0,
              "AllowedMethods": [
                "HEAD",
                "DELETE",
                "POST",
                "GET",
                "OPTIONS",
                "PUT",
                "PATCH"
              ],
              "CachedMethods": [
                "GET",
                "HEAD"
              ],
              "SmoothStreaming": false,
              "DefaultTTL": 86400,
              "MaxTTL": 31536000,
              "Compress": true
            }
          ],
          "PriceClass": "PriceClass_All",
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Ref": "Certificate"
            },
            "SslSupportMethod": "sni-only",
            "MinimumProtocolVersion": "TLSv1.2_2019"
          }
        }
      }
    },
    "Alias": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": "meatspace.chat.",
        "RecordSets": [
          {
            "Name": "meatspace.chat.",
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": "Z2FDTNDATAQYW2",
              "DNSName": {
                "Fn::GetAtt": [
                  "CDN",
                  "DomainName"
                ]
              }
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "API": {
      "Description": "API Gateway (HTTP)",
      "Value": {
        "Fn::Sub": [
          "https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com",
          {
            "ApiId": {
              "Ref": "HTTP"
            }
          }
        ]
      }
    },
    "ApiId": {
      "Description": "API ID (ApiId)",
      "Value": {
        "Ref": "HTTP"
      }
    },
    "MessagePostedEventTopic": {
      "Description": "An SNS Topic",
      "Value": {
        "Ref": "MessagePostedEventTopic"
      }
    },
    "BucketURL": {
      "Description": "Bucket URL",
      "Value": {
        "Fn::Sub": [
          "http://${bukkit}.s3-website-${AWS::Region}.amazonaws.com",
          {
            "bukkit": {
              "Ref": "StaticBucket"
            }
          }
        ]
      }
    },
    "WSS": {
      "Description": "WebSocket Endpoint",
      "Value": {
        "Fn::Sub": [
          "wss://${WS}.execute-api.${AWS::Region}.amazonaws.com/staging",
          {}
        ]
      }
    }
  }
}